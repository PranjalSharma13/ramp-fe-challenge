{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pranj\\\\OneDrive\\\\Desktop\\\\Projects\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    loading: transactionsLoading,\n    fetchNext,\n    invalidateData: invalidatePaginatedData\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [additionalTransactions, setAdditionalTransactions] = useState([]);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return [...((_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : []), ...additionalTransactions];\n  }, [paginatedTransactions, transactionsByEmployee, additionalTransactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    invalidatePaginatedData();\n    await employeeUtils.fetchAll();\n    await fetchNext(); // Fetch initial transactions\n\n    setIsLoading(false);\n  }, [employeeUtils, fetchNext, invalidatePaginatedData]);\n  const loadMoreTransactions = useCallback(async () => {\n    setIsLoading(true);\n    await fetchNext(); // Fetch more transactions\n\n    setIsLoading(false);\n  }, [fetchNext]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    invalidatePaginatedData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [invalidatePaginatedData, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employees, employeeUtils, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue && (newValue.id === null || newValue.id === '')) {\n            setAdditionalTransactions([]); // Clear additional transactions when loading all transactions\n\n            await loadAllTransactions();\n          } else {\n            setAdditionalTransactions([]); // Clear additional transactions when filtering by employee\n\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: transactionsLoading || isLoading,\n          onClick: loadMoreTransactions,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HRTZDi4Ferna9xIA+WVldjLo0d4=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","loading","transactionsLoading","fetchNext","invalidateData","invalidatePaginatedData","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","additionalTransactions","setAdditionalTransactions","transactions","loadAllTransactions","fetchAll","loadMoreTransactions","loadTransactionsByEmployee","employeeId","fetchById","item","value","id","label","firstName","lastName","newValue","length"],"sources":["C:/Users/pranj/OneDrive/Desktop/Projects/ramp-fe-challenge/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, loading: transactionsLoading, fetchNext, invalidateData: invalidatePaginatedData } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [additionalTransactions, setAdditionalTransactions] = useState([]);\n\n  const transactions = useMemo(\n    () => [...(paginatedTransactions?.data ?? transactionsByEmployee ?? []), ...additionalTransactions],\n    [paginatedTransactions, transactionsByEmployee, additionalTransactions]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    invalidatePaginatedData();\n    await employeeUtils.fetchAll();\n    await fetchNext(); // Fetch initial transactions\n    setIsLoading(false);\n  }, [employeeUtils, fetchNext, invalidatePaginatedData]);\n\n  const loadMoreTransactions = useCallback(async () => {\n    setIsLoading(true);\n    await fetchNext(); // Fetch more transactions\n    setIsLoading(false);\n  }, [fetchNext]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      invalidatePaginatedData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [invalidatePaginatedData, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employees, employeeUtils, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue && (newValue.id === null || newValue.id === '')) {\n              setAdditionalTransactions([]); // Clear additional transactions when loading all transactions\n              await loadAllTransactions();\n            } else {\n              setAdditionalTransactions([]); // Clear additional transactions when filtering by employee\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions.length > 0 && (\n            <button\n              className=\"RampButton\"\n              disabled={transactionsLoading || isLoading}\n              onClick={loadMoreTransactions}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}