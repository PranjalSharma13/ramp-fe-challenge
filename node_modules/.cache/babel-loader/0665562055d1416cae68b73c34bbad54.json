{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) // <Downshift<TItem>\n  //   id=\"RampSelect\"\n  //   onChange={onChange}\n  //   selectedItem={selectedValue}\n  //   itemToString={(item) => (item ? parseItem(item).label : \"\")}\n  // >\n  //   {({\n  //     getItemProps,\n  //     getLabelProps,\n  //     getMenuProps,\n  //     isOpen,\n  //     highlightedIndex,\n  //     selectedItem,\n  //     getToggleButtonProps,\n  //     inputValue,\n  //   }) => {\n  //     const toggleProps = getToggleButtonProps()\n  //     const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n  //     const displayedValue = parsedSelectedItem ? parsedSelectedItem.label : inputValue\n  //     return (\n  //       <div className=\"RampInputSelect--root\">\n  //         <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n  //           {label}\n  //         </label>\n  //         <div className=\"RampBreak--xs\" />\n  //         <div\n  //           className=\"RampInputSelect--input\"\n  //           onClick={(event) => {\n  //             setDropdownPosition(getDropdownPosition(event.target))\n  //             toggleProps.onClick(event)\n  //           }}\n  //         >\n  //           {displayedValue}\n  //         </div>\n  //         <div\n  //           className={classNames(\"RampInputSelect--dropdown-container\", {\n  //             \"RampInputSelect--dropdown-container-opened\": isOpen,\n  //           })}\n  //           {...getMenuProps()}\n  //           style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n  //         >\n  //           {renderItems()}\n  //         </div>\n  //       </div>\n  //     )\n  //     function renderItems() {\n  //       if (!isOpen) {\n  //         return null\n  //       }\n  //       if (isLoading) {\n  //         return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n  //       }\n  //       if (items.length === 0) {\n  //         return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n  //       }\n  //       return items.map((item, index) => {\n  //         const parsedItem = parseItem(item)\n  //         return (\n  //           <div\n  //             key={parsedItem.value}\n  //             {...getItemProps({\n  //               key: parsedItem.value,\n  //               index,\n  //               item,\n  //               className: classNames(\"RampInputSelect--dropdown-item\", {\n  //                 \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n  //                 \"RampInputSelect--dropdown-item-selected\":\n  //                   parsedSelectedItem?.value === parsedItem.value,\n  //               }),\n  //             })}\n  //           >\n  //             {parsedItem.label}\n  //           </div>\n  //         )\n  //       })\n  //     }\n  //   }}\n  // </Downshift>\n  ;\n}\n\n_s(InputSelect, \"P/yBOClT+tikRlX+sSLK7WIsfTo=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: scrollY + top + 63,\n      left\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["useCallback","useState","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","selectedItem","getDropdownPosition","target","Element","getBoundingClientRect","scrollY","window"],"sources":["C:/Users/pranj/OneDrive/Desktop/Projects/ramp-fe-challenge/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport { useCallback, useState } from \"react\"\nimport classNames from \"classnames\"\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps, InputSelectItem } from \"./types\"\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n    top: 0,\n    left: 0,\n  })\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return\n      }\n\n      consumerOnChange(selectedItem)\n      setSelectedValue(selectedItem)\n    },\n    [consumerOnChange]\n  )\n\n  return (<></>\n    // <Downshift<TItem>\n    //   id=\"RampSelect\"\n    //   onChange={onChange}\n    //   selectedItem={selectedValue}\n    //   itemToString={(item) => (item ? parseItem(item).label : \"\")}\n    // >\n    //   {({\n    //     getItemProps,\n    //     getLabelProps,\n    //     getMenuProps,\n    //     isOpen,\n    //     highlightedIndex,\n    //     selectedItem,\n    //     getToggleButtonProps,\n    //     inputValue,\n    //   }) => {\n    //     const toggleProps = getToggleButtonProps()\n    //     const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n    //     const displayedValue = parsedSelectedItem ? parsedSelectedItem.label : inputValue\n\n    //     return (\n    //       <div className=\"RampInputSelect--root\">\n    //         <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n    //           {label}\n    //         </label>\n    //         <div className=\"RampBreak--xs\" />\n    //         <div\n    //           className=\"RampInputSelect--input\"\n    //           onClick={(event) => {\n    //             setDropdownPosition(getDropdownPosition(event.target))\n    //             toggleProps.onClick(event)\n    //           }}\n    //         >\n    //           {displayedValue}\n    //         </div>\n\n    //         <div\n    //           className={classNames(\"RampInputSelect--dropdown-container\", {\n    //             \"RampInputSelect--dropdown-container-opened\": isOpen,\n    //           })}\n    //           {...getMenuProps()}\n    //           style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n    //         >\n    //           {renderItems()}\n    //         </div>\n    //       </div>\n    //     )\n\n    //     function renderItems() {\n    //       if (!isOpen) {\n    //         return null\n    //       }\n\n    //       if (isLoading) {\n    //         return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n    //       }\n\n    //       if (items.length === 0) {\n    //         return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n    //       }\n\n    //       return items.map((item, index) => {\n    //         const parsedItem = parseItem(item)\n    //         return (\n    //           <div\n    //             key={parsedItem.value}\n    //             {...getItemProps({\n    //               key: parsedItem.value,\n    //               index,\n    //               item,\n    //               className: classNames(\"RampInputSelect--dropdown-item\", {\n    //                 \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n    //                 \"RampInputSelect--dropdown-item-selected\":\n    //                   parsedSelectedItem?.value === parsedItem.value,\n    //               }),\n    //             })}\n    //           >\n    //             {parsedItem.label}\n    //           </div>\n    //         )\n    //       })\n    //     }\n    //   }}\n    // </Downshift>\n  )\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const { top, left } = target.getBoundingClientRect()\n    const { scrollY } = window\n    return {\n      top: scrollY + top + 63,\n      left,\n    }\n  }\n\n  return { top: 0, left: 0 }\n}\n"],"mappings":";;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;;AAIA,OAAO,SAASC,WAAT,OAQqB;EAAA;;EAAA,IARO;IACjCC,KADiC;IAEjCC,YAFiC;IAGjCC,QAAQ,EAAEC,gBAHuB;IAIjCC,KAJiC;IAKjCC,SALiC;IAMjCC,SANiC;IAOjCC;EAPiC,CAQP;EAC1B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAeG,YAAf,aAAeA,YAAf,cAAeA,YAAf,GAA+B,IAA/B,CAAlD;EACA,MAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAmB;IACzEc,GAAG,EAAE,CADoE;IAEzEC,IAAI,EAAE;EAFmE,CAAnB,CAAxD;EAKA,MAAMX,QAAQ,GAAGL,WAAW,CACzBiB,YAAD,IAAkB;IAChB,IAAIA,YAAY,KAAK,IAArB,EAA2B;MACzB;IACD;;IAEDX,gBAAgB,CAACW,YAAD,CAAhB;IACAL,gBAAgB,CAACK,YAAD,CAAhB;EACD,CARyB,EAS1B,CAACX,gBAAD,CAT0B,CAA5B;EAYA,oBAAQ,qCAAR,CACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EApFF;AAsFD;;GAjHeJ,W;;KAAAA,W;;AAmHhB,MAAMgB,mBAA0C,GAAIC,MAAD,IAAY;EAC7D,IAAIA,MAAM,YAAYC,OAAtB,EAA+B;IAC7B,MAAM;MAAEL,GAAF;MAAOC;IAAP,IAAgBG,MAAM,CAACE,qBAAP,EAAtB;IACA,MAAM;MAAEC;IAAF,IAAcC,MAApB;IACA,OAAO;MACLR,GAAG,EAAEO,OAAO,GAAGP,GAAV,GAAgB,EADhB;MAELC;IAFK,CAAP;EAID;;EAED,OAAO;IAAED,GAAG,EAAE,CAAP;IAAUC,IAAI,EAAE;EAAhB,CAAP;AACD,CAXD"},"metadata":{},"sourceType":"module"}