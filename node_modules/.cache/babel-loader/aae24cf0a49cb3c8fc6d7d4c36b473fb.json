{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [page, setPage] = useState(0); // Track current page\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: 0 // Fetch the first page\n\n    });\n    setPaginatedTransactions(response);\n    setPage(1); // Set the next page to be fetched\n  }, [fetchWithCache]);\n  const fetchNext = useCallback(async () => {\n    if (!(paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.nextPage)) return; // No more pages to fetch\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: page // Fetch the next page\n\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        // Append new data\n        nextPage: response.nextPage\n      };\n    });\n    setPage(prevPage => prevPage + 1); // Increment the page number\n  }, [fetchWithCache, paginatedTransactions, page]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n    setPage(0); // Reset page number\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    fetchNext,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"qv8/t8aVeeNZurJLngbFJPGihBw=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","page","setPage","fetchAll","response","fetchNext","nextPage","previousResponse","data","prevPage","invalidateData"],"sources":["C:/Users/pranj/OneDrive/Desktop/Projects/ramp-fe-challenge/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n  const [page, setPage] = useState(0); // Track current page\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: 0, // Fetch the first page\n      }\n    );\n\n    setPaginatedTransactions(response);\n    setPage(1); // Set the next page to be fetched\n  }, [fetchWithCache]);\n\n  const fetchNext = useCallback(async () => {\n    if (!paginatedTransactions?.nextPage) return; // No more pages to fetch\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: page, // Fetch the next page\n      }\n    );\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data], // Append new data\n        nextPage: response.nextPage,\n      };\n    });\n\n    setPage((prevPage) => prevPage + 1); // Increment the page number\n  }, [fetchWithCache, paginatedTransactions, page]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n    setPage(0); // Reset page number\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, fetchNext, invalidateData };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EACA,MAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC,CAHsE,CAGjC;;EAErC,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC,MAAMW,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEI,IAAI,EAAE,CADR,CACW;;IADX,CAFmC,CAArC;IAOAD,wBAAwB,CAACI,QAAD,CAAxB;IACAF,OAAO,CAAC,CAAD,CAAP,CATuC,CAS3B;EACb,CAV2B,EAUzB,CAACL,cAAD,CAVyB,CAA5B;EAYA,MAAMQ,SAAS,GAAGZ,WAAW,CAAC,YAAY;IACxC,IAAI,EAACM,qBAAD,aAACA,qBAAD,eAACA,qBAAqB,CAAEO,QAAxB,CAAJ,EAAsC,OADE,CACM;;IAE9C,MAAMF,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEI,IAAI,EAAEA,IADR,CACc;;IADd,CAFmC,CAArC;IAOAD,wBAAwB,CAAEO,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MAED,OAAO;QACLI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;QAC+C;QACpDF,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CATuB,CAAxB;IAWAJ,OAAO,CAAEO,QAAD,IAAcA,QAAQ,GAAG,CAA1B,CAAP,CArBwC,CAqBH;EACtC,CAtB4B,EAsB1B,CAACZ,cAAD,EAAiBE,qBAAjB,EAAwCE,IAAxC,CAtB0B,CAA7B;EAwBA,MAAMS,cAAc,GAAGjB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;IACAE,OAAO,CAAC,CAAD,CAAP,CAFuC,CAE3B;EACb,CAHiC,EAG/B,EAH+B,CAAlC;EAKA,OAAO;IAAEM,IAAI,EAAET,qBAAR;IAA+BD,OAA/B;IAAwCK,QAAxC;IAAkDE,SAAlD;IAA6DK;EAA7D,CAAP;AACD;;GA/Ced,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}